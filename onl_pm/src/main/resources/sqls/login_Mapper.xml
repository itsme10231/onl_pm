<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nl.onl.login">
	
	<resultMap type="ProfileDto" id="ProfileDtoMap">
		<result column="SEQ" property="seq"/>
		<result column="ID" property="id"/>
		<result column="INTRO" property="intro"/>
		<result column="LOCATION_ABLE" property="location_able"/>
		<result column="SEARCH_SCORE" property="search_score"/>
		<result column="OFFER_SCORE" property="offer_score"/>
		<result column="NICKNAME" property="nickname"/>
		<collection property="filedto" resultMap="FileDtoMap"/>
	</resultMap>
	
	<resultMap type="FileDto" id="FileDtoMap">
		<result column="SEQ" property="seq"/>
		<result column="ORIGIN_NAME" property="stored_name"/>
		<result column="STORED_NAME" property="stored_name"/>
		<result column="REGDATE" property="regdate"/>
		<result column="DELFLAG" property="delflag"/>
		<result column="BOARD_TYPE" property="board_type"/>
		<result column="ID" property="id"/>
		<result column="POST_SEQ" property="post_seq"/>
	</resultMap>
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="LoginDto">
		INSERT INTO MEMBER 
		VALUES (
				#{regflag}||MEMBER_SEQ.NEXTVAL, #{password}, #{name}, #{address_1}, #{address_2}, #{address_3}, #{email}, 
				<choose>
					<when test="nickname!=null">
					#{nickname}, 
					</when>
					<otherwise>
					#{name}, 
					</otherwise>
				</choose>
				#{birth,  jdbcType=DATE},
				'N', SYSDATE, #{role}, #{phone}
				)
	</insert>
	
	<!-- 이메일 중복검사 -->
	<select id="checkEmail" parameterType="String" resultType="String">
		SELECT ID FROM MEMBER WHERE EMAIL = #{email}
	</select>
	
	<!-- 로그인 -->
	<select id="login" parameterType="String" resultType="LoginDto">
		SELECT m.ID, m.PASSWORD, m.NICKNAME, m.DELFLAG, m.ROLE, m.PHONE FROM "MEMBER" m WHERE m.EMAIL = #{email}
	</select>
	
	<!-- 정보수정 -->
	<update id="updateInfo" parameterType="LoginDto">
		UPDATE MEMBER 
		SET <if test="password!=null">PASSWORD = #{password},</if>
			ADDRESS_1 = #{address_1},
			ADDRESS_2 = #{address_2},
			ADDRESS_3 = #{address_3},
			EMAIL = #{email},
			NICKNAME = #{nickname},
			BIRTH = #{birth},
			PHONE = #{phone}
	</update>
	
	<!-- 탈퇴 및 정지 -->
	<update id="updateDelflag" parameterType="String">
		UPDATE MEMBER
		SET DELFLAG = 'Y' AND REGDATE = SYSDATE 
		WHERE ID = #{id}
	</update>
	
	<!-- 회원정보 영구삭제 -->
	<delete id="deleteMember">
		DELETE MEMBER 
		WHERE DELFLAG = 'Y' AND (SYSDATE-REGDATE) >= 180
	</delete>
	
	<!-- 프로필 작성 -->
	<insert id="insertProfile" parameterType="ProfileDto">
		INSERT INTO PROFILE
		VALUES (
				PROFILE_SEQ.NEXTVAL, #{id}, #{intro}, #{location_able}
				)
	</insert>
	
	<!-- 프로필 보기 -->
	<select id="getProfile" parameterType="String" resultType="ProfileDto">
		SELECT	 m.ID , m.NICKNAME , NVL(p.INTRO, '아직 작성하지 않았습니다.') AS INTRO, NVL(p.LOCATION_ABLE, '아직 선택된 지역이 없습니다.') AS LOCATION_ABLE,
				CASE 
				WHEN NOT EXISTS (SELECT 1 FROM REVIEW_POST rp WHERE rp."TYPE" = 'SEARCH' AND m.ID  = rp.TARGET_ID ) THEN 0
				ELSE (SELECT AVG(rp.SCORE) FROM REVIEW_POST rp WHERE rp."TYPE" = 'SEARCH' AND m.ID = rp.TARGET_ID)
				END AS search_score,
				CASE 
				WHEN NOT EXISTS (SELECT 1 FROM REVIEW_POST rp WHERE rp."TYPE" = 'OFFER' AND m.ID  = rp.TARGET_ID ) THEN 0
				ELSE (SELECT AVG(rp.SCORE) FROM REVIEW_POST rp WHERE rp."TYPE" = 'OFFER' AND m.ID = rp.TARGET_ID)
				END AS offer_score, f.STORED_NAME
		FROM 	"MEMBER" m , PROFILE p ,
				(SELECT STORED_NAME, ID 
				 FROM UPLOAD_FILE 
				 WHERE BOARD_TYPE = 'PROFILE' AND ID = 'onltest1') f
		WHERE 	m.ID = 'onltest1' AND m.ID = p.ID(+) AND m.ID = f.ID(+) 
	</select>
	
	<!-- 프로필 수정 -->
	<update id="updateProfile" parameterType="ProfileDto">
		UPDATE PROFILE
		SET INTRO = #{intro},
			LOCATION_ABLE = #{location_able}
		WHERE ID = #{id}
	</update>
	
	
</mapper>